# path to oh-my-zsh installation
export ZSH="/Users/thomas/.oh-my-zsh"

ZSH_THEME="thowue"

plugins=(
  git
  rails
  brew
  macos
  gem
  docker
  docker-compose
  kubectl
)

export ZSH_DISABLE_COMPINIT_WARN=true
source $ZSH/oh-my-zsh.sh


# --- shell ---
alias mv="mv -i -v"
alias cp="cp -i -v"
alias lar="ls -lAhtr"
alias l="ls -1A"
alias ln="ln -sv"
alias lq="tree -a -L 3 -I '.git|*org.eclipse*'"
alias findregex="find . -iregex"
alias restart="exec $SHELL"
alias type="type -a"
alias lest="less +G"
alias sortenv="sort -o .env .env"
alias grep="grep --ignore-case --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox}"
alias grepc="grep --context"
alias diff="git diff --no-index"
alias envl="env | less +G"
alias -g lss="| less"
alias -g hlp="--help | less"

function setenv() {
  set -a
  if [[ -z $@ ]]; then
    source .env
  else
    source $@
  fi
  set +a

  if [[ $HEROKU_PG_DB ]]; then
    export DATABASE_URL="$(heroku config:get DATABASE_URL)"
  fi
}

function show() {
  la | grep $1
}

function search() {
  local keyword="*$1*"
  find . -iname $keyword 2> /dev/null
}

function search-rm() {
  local keyword="*$1*"
  find . -iname $keyword -delete
}

function search-bin() {
  echo '/usr/local/bin:'
  ls -lAh /usr/local/bin | grep $1
  echo '/usr/bin:'
  ls -lAh /usr/bin | grep $1
  echo '/bin:'
  ls -lAh /bin | grep $1
}

function mdc() {
  mkdir -p $1
  cd $1
}

export LSCOLORS="Fxfxcxdxbxegedabagacad"
export LS_COLORS="di=1;35:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43"
export LESSOPEN="| /opt/homebrew/bin/src-hilite-lesspipe.sh %s"
export LESS=" --RAW-CONTROL-CHARS --ignore-case "
export GREP_COLOR="0;34"

# disable START/STOP output control
stty -ixon


# --- config lists ---
alias apmlist="apm list --installed --bare > ~/coding/dotfiles/atom/apm_list.txt"
alias brewlist="brew list --versions > ~/coding/dotfiles/cellar/brew_list.txt"
alias codelist="code --list-extensions --show-versions > ~/coding/dotfiles/vscode/extensionList.txt"


# --- git ---
alias gl="git log"
alias gdh="git diff HEAD --stat --patch"
alias gdhs="git diff HEAD --staged --stat --patch"
alias gfv="git fetch --verbose"
alias gfa="git fetch --all --prune --jobs=10 --verbose"
alias gls="git log --stat"
alias glg="git log --decorate --oneline --graph --author-date-order"
alias glga="git log --decorate --oneline --graph --author-date-order --all"
alias gs="git stash"
alias gsl="git stash list"
alias gslp="git stash list --stat --patch"
alias gr="git remote --verbose"
alias gro="git remote show origin"
alias grh="git remote show heroku"
alias gph="git push heroku"
alias gpl="git pull"
alias gdm='git diff $(git_main_branch)'

unalias grs
unalias grss

function grs() {
  if [[ -z $@ ]]; then
    echo -n 'restore all? '
    read user_input
    if [[ $user_input == 'y' ]]; then
      git restore :/
    fi
  else
    git restore $@
  fi
}

function grss() {
  if [[ -z $@ ]]; then
    echo -n 'unstage all? '
    read user_input
    if [[ $user_input == 'y' ]]; then
      git restore --staged :/
    fi
  else
    git restore --staged $@
  fi
}

function gsb() {
  git show "$1:./$2"
}

# remove homebrew git completion
rm /usr/local/share/zsh/site-functions/_git 2> /dev/null


# --- db ---
alias mst="mysql.server status"
alias msr="mysql.server start"
alias msp="mysql.server stop"

alias pgc="pg_ctl"
alias pst="pg_ctl status"
alias psr="pg_ctl start"
alias psp="pg_ctl stop"

function psql-heroku() {
  local DATABASE_URL="$(heroku config:get DATABASE_URL)"
  if [[ $DATABASE_URL == postgres://* ]]; then
    psql $DATABASE_URL
  else
    echo "failed to retrieve heroku DATABASE_URL config var"
  fi
}

export PGDATA="/usr/local/var/postgres"


# --- sfdx ---
alias sfdxallmd="sfdx force:source:retrieve -x ~/coding/salesforce/package_all.xml --verbose"
alias sfdxcode="sfdx force:source:retrieve -x ~/coding/salesforce/package_code.xml --verbose"
alias sfdxdeploycode="sfdx force:source:deploy -x ~/coding/salesforce/package_code.xml -l NoTestRun --verbose"
alias sfdxv="sfdx force:source:deploy --checkonly --testlevel=RunSpecifiedTests"
alias sfdepl="sf project deploy start"


# --- misc ---
alias -g icloud="/Users/thomas/Library/Mobile\ Documents/com~apple~CloudDocs"
alias at="atom ."
alias hlt="heroku logs --tail"
alias hll="heroku logs -n 500 | less +G"
alias rt="rails test"
alias gemi="gem install *.gem"
alias brewl="brew list --versions | less"
alias cdf="cd force-app/main/default"
alias codepg="pgrep -l -f 'vscode/extensions/salesforce'"
alias codepk="pkill -l -f 'vscode/extensions/salesforce'"
alias dspr="docker system prune"
alias kdp="kubectl describe pods | less"
alias ffplay="ffplay -nodisp"

function init-repo() {
  mkdir "$1"
  cd "$1"
  git init
  touch .env
  echo '.env' > .gitignore
  git add .gitignore
  git commit -m 'init repo'
}

function co() {
  local root_path=$(git rev-parse --show-toplevel 2> /dev/null)
  if [[ -n $root_path ]]; then
    code $root_path
  else
    code .
  fi
}

function ytdl-mp3() {
  echo -n 'Artist: '
  read artist
  echo -n 'Title: '
  read title
  local output=$(yt-dlp --format 'bestaudio/best' --extract-audio --audio-format mp3 --audio-quality 0 --embed-thumbnail --output '~/Downloads/tracks/%(title)s.%(ext)s' "$1" | tee /dev/tty)
  echo '---'
  local ffmpeg_dest=$(echo $output | grep '\[ExtractAudio\] Destination')
  echo $ffmpeg_dest
  local file_path_vbr=$(echo $ffmpeg_dest | grep --only-matching '\/.*\.mp3')
  echo $file_path_vbr
  echo '---'
  bitrate $file_path_vbr
  echo '---'
  echo 'converting to 320k CBR...'
  if [[ -n $artist && -n $title ]]; then
    local file_path_tmp="$file_path_vbr.tmp"
    mv $file_path_vbr $file_path_tmp
    file_name="$artist - $title"
    ffmpeg -i $file_path_tmp -b:a 320k -vsync 2 -metadata artist=$artist -metadata title=$title "$HOME/Downloads/tracks/$file_name.mp3"
    rm $file_path_tmp
  fi
  echo '---'
  bitrate "$HOME/Downloads/tracks/$file_name.mp3"
}

function bitrate() {
  mpck "$1" | grep bitrate
}


export LOGS_DIR="/Users/thomas/coding/logs"
export ARCHIVE_DIR="/Users/thomas/coding/archive"
export VIRTUAL_ENV_DISABLE_PROMPT=1
export VISUAL=vim
export EDITOR=$VISUAL

eval "$(rbenv init - zsh)"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# heroku autocomplete setup
HEROKU_AC_ZSH_SETUP_PATH=/Users/thomas/Library/Caches/heroku/autocomplete/zsh_setup && test -f $HEROKU_AC_ZSH_SETUP_PATH && source $HEROKU_AC_ZSH_SETUP_PATH;
